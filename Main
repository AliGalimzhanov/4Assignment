public class Main {
    public static void main(String[] args) {
        
        WeightedGraph<String> graph = new WeightedGraph<>();

       
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("E");

       
        graph.addBidirectionalEdge("A", "B", 5.0);
        graph.addBidirectionalEdge("A", "C", 3.0);
        graph.addBidirectionalEdge("B", "C", 2.0);
        graph.addBidirectionalEdge("B", "D", 1.0);
        graph.addBidirectionalEdge("C", "D", 4.0);
        graph.addBidirectionalEdge("C", "E", 6.0);
        graph.addBidirectionalEdge("D", "E", 2.0);

        System.out.println("Graph structure:");
        System.out.println(graph);

      
        BreadthFirstSearch<String> bfs = new BreadthFirstSearch<>(graph);
        System.out.println("\nBFS traversal from A:");
        System.out.println(bfs.traverseValues("A"));

        
        System.out.println("\nBFS path from A to E:");
        System.out.println(bfs.findPath("A", "E"));

        
        DijkstraSearch<String> dijkstra = new DijkstraSearch<>(graph);
        System.out.println("\nDijkstra's shortest distances from A:");
        System.out.println(dijkstra.findShortestPaths("A"));

       
        System.out.println("\nDijkstra's shortest path from A to E:");
        System.out.println(dijkstra.findShortestPath("A", "E"));

        
        System.out.println("\n----- More Complex Example -----");
        WeightedGraph<Integer> graph2 = new WeightedGraph<>();

       
        for (int i = 0; i <= 8; i++) {
            graph2.addVertex(i);
        }

       
        graph2.addBidirectionalEdge(0, 1, 4.0);
        graph2.addBidirectionalEdge(0, 7, 8.0);
        graph2.addBidirectionalEdge(1, 2, 8.0);
        graph2.addBidirectionalEdge(1, 7, 11.0);
        graph2.addBidirectionalEdge(2, 3, 7.0);
        graph2.addBidirectionalEdge(2, 8, 2.0);
        graph2.addBidirectionalEdge(2, 5, 4.0);
        graph2.addBidirectionalEdge(3, 4, 9.0);
        graph2.addBidirectionalEdge(3, 5, 14.0);
        graph2.addBidirectionalEdge(4, 5, 10.0);
        graph2.addBidirectionalEdge(5, 6, 2.0);
        graph2.addBidirectionalEdge(6, 7, 1.0);
        graph2.addBidirectionalEdge(6, 8, 6.0);
        graph2.addBidirectionalEdge(7, 8, 7.0);

       
        BreadthFirstSearch<Integer> bfs2 = new BreadthFirstSearch<>(graph2);
        System.out.println("\nBFS traversal from 0:");
        System.out.println(bfs2.traverseValues(0));

       
        DijkstraSearch<Integer> dijkstra2 = new DijkstraSearch<>(graph2);
        System.out.println("\nDijkstra's shortest path from 0 to 4:");
        System.out.println(dijkstra2.findShortestPath(0, 4));
        System.out.println("Shortest distance: " + dijkstra2.findShortestPaths(0).get(4));
    }
}
